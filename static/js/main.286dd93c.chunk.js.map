{"version":3,"sources":["socketio/index.js","polyfill.js","App.js","serviceWorker.js","index.js"],"names":["socket","SocketIoHelper","setup","port","window","location","openSocket","document","domain","on","giveData","data","emit","getHistory","cb","history","getWeather","weather","JSON","parse","getData","requestData","getState","state","getSettings","settings","saveSettings","sett","sendRasp","rasp_value","sendVideo","video","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","createEvent","initCustomEvent","prototype","Event","loading","className","DefaultLayout","Loadable","loader","Page404","Page500","App","hashType","exact","path","name","component","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAA,IAEIA,EAFJ,kBAIMC,EAAiB,CACrBC,MAAO,WACL,IAAIC,EAEFA,EAD2B,SAAzBC,OAAOC,SAASF,KACX,OAEAC,OAAOC,SAASF,MAEzBH,EAASM,IAAW,UAAYC,SAASC,OAAS,IAAML,IAGjDM,GAAG,cAAc,gBAK1BC,SAAU,SAASC,GACjBX,EAAOY,KAAK,YAAaD,IAG3BE,WAAY,SAASC,GACnBd,EAAOY,KAAK,mBACZZ,EAAOS,GAAG,oBAAoB,SAAAM,GAAO,OAAID,EAAGC,OAG9CC,WAAY,SAASF,GACnBd,EAAOS,GAAG,oBAAoB,SAAAQ,GAAO,OAAIH,EAAGI,KAAKC,MAAMF,QAQzDG,QAAS,SAASN,GAChBd,EAAOS,GAAG,iBAAiB,SAAAE,GAAI,OAAIG,EAAGI,KAAKC,MAAMR,QAGnDU,YAAa,WACXrB,EAAOY,KAAK,iBAIdU,SAAU,SAASR,GACjBd,EAAOY,KAAK,iBACZZ,EAAOS,GAAG,kBAAkB,SAAAc,GAAK,OAAIT,EAAGI,KAAKC,MAAMI,QAIrDC,YAAa,SAASV,GACpBd,EAAOY,KAAK,oBACZZ,EAAOS,GAAG,qBAAqB,SAAAgB,GAAQ,OAAIX,EAAGI,KAAKC,MAAMM,QAG3DC,aAAc,SAASC,GACrB3B,EAAOY,KAAK,eAAgBe,IAI9BC,SAAU,SAASC,GACjB7B,EAAOY,KAAK,YAAaiB,IAI3BC,UAAW,SAASC,GAClB/B,EAAOY,KAAK,aAAcmB,KAUf9B,O,whEChDd,WACC,GAAkC,oBAAvBG,OAAO4B,YAA4B,OAAO,EAErD,SAASA,EAAYC,EAAOC,GAC1BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMhC,SAASiC,YAAY,eAE/B,OADAD,EAAIE,gBAAgBR,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC9DE,EAGTP,EAAYU,UAAYtC,OAAOuC,MAAMD,UAErCtC,OAAO4B,YAAcA,EAZtB,G,0JCvBKY,EAAU,kBACd,yBAAKC,UAAU,oCAAf,eAIIC,EAAgBC,IAAS,CAC7BC,OAAQ,kBAAM,sDACdJ,YAIIK,EAAUF,IAAS,CACvBC,OAAQ,kBAAM,gCACdJ,YAGIM,EAAUH,IAAS,CACvBC,OAAQ,kBAAM,gCACdJ,YAwBaO,E,kLAnBXlD,IAAeC,U,+BAIf,OACE,yBAAK2C,UAAU,iBACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAYO,SAAS,WACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWC,UAAWP,IACpD,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWC,UAAWN,IACpD,kBAAC,IAAD,CAAOI,KAAK,IAAIC,KAAK,OAAOC,UAAWV,W,GAbjCW,aCnBEC,QACW,cAA7BtD,OAAOC,SAASsD,UAEe,UAA7BvD,OAAOC,SAASsD,UAEhBvD,OAAOC,SAASsD,SAASC,MACvB,2DCPNC,IAASC,OAAO,kBAAC,EAAD,MAASvD,SAASwD,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.286dd93c.chunk.js","sourcesContent":["import openSocket from 'socket.io-client'\n\nlet socket\n\nconst SocketIoHelper = {\n  setup: function() {\n    let port\n    if (window.location.port === '3000') {\n      port = '5000'\n    } else {\n      port = window.location.port\n    }\n    socket = openSocket('http://' + document.domain + ':' + port)\n\n    // connessione\n    socket.on('connection', () => {\n      //alert(msg);\n    })\n  },\n  // funzione template\n  giveData: function(data) {\n    socket.emit('give_json', data)\n  },\n\n  getHistory: function(cb) {\n    socket.emit('history_request')\n    socket.on('history_response', history => cb(history))\n  },\n\n  getWeather: function(cb) {\n    socket.on('weather_response', weather => cb(JSON.parse(weather)))\n  },\n\n  // pacchetti tipo 0\n  /*\n   * Servono due funzioni poiche' i dati\n   * vengono richiesti dentro un setTimeout\n   */\n  getData: function(cb) {\n    socket.on('data_response', data => cb(JSON.parse(data)))\n  },\n\n  requestData: function() {\n    socket.emit('data_request')\n  },\n\n  // pacchetto tipo 1\n  getState: function(cb) {\n    socket.emit('state_request')\n    socket.on('state_response', state => cb(JSON.parse(state)))\n  },\n\n  // pacchetti tipo 3\n  getSettings: function(cb) {\n    socket.emit('settings_request')\n    socket.on('settings_response', settings => cb(JSON.parse(settings)))\n  },\n\n  saveSettings: function(sett) {\n    socket.emit('save_setting', sett)\n  },\n\n  // pacchetto tipo 6\n  sendRasp: function(rasp_value) {\n    socket.emit('send_rasp', rasp_value)\n  },\n\n  // pacchetto tipo 7\n  sendVideo: function(video) {\n    socket.emit('send_video', video)\n  },\n\n  // NOTE: Il cambio va bene con l'app bluetooth android\n  // pacchetto tipo 8\n  // sendCalibration: function (calibration) {\n  //   socket.emit(\"send_calibration\", calibration);\n  // }\n}\n\nexport default SocketIoHelper\n","/*\n * required polyfills\n */\nimport 'core-js'\nimport 'core-js/features/set/map'\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es6/symbol'\n// import 'core-js/es6/object'\n// import 'core-js/es6/function'\n// import 'core-js/es6/parse-int'\n// import 'core-js/es6/parse-float'\n// import 'core-js/es6/number'\n// import 'core-js/es6/math'\n// import 'core-js/es6/string'\n// import 'core-js/es6/date'\n// import 'core-js/es6/array'\n// import 'core-js/es6/regexp'\n// import 'core-js/es6/map'\n// import 'core-js/es6/weak-map'\n// import 'core-js/es6/set'\n// import 'core-js/es7/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es6/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es7/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n;(function() {\n  if (typeof window.CustomEvent === 'function') return false\n\n  function CustomEvent(event, params) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent('CustomEvent')\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail)\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import React, { Component } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n// import { renderRoutes } from 'react-router-config';\nimport Loadable from 'react-loadable'\nimport './App.scss'\nimport SocketIoHelper from './socketio'\nimport ReactNotification from 'react-notifications-component'\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n)\n\n// Containers\nconst DefaultLayout = Loadable({\n  loader: () => import('./containers/DefaultLayout'),\n  loading,\n})\n\n// Pages\nconst Page404 = Loadable({\n  loader: () => import('./views/Pages/Page404'),\n  loading,\n})\n\nconst Page500 = Loadable({\n  loader: () => import('./views/Pages/Page500'),\n  loading,\n})\n\nclass App extends Component {\n  componentDidMount() {\n    SocketIoHelper.setup()\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <ReactNotification />\n        <HashRouter hashType=\"noslash\">\n          <Switch>\n            <Route exact path=\"/404\" name=\"Page 404\" component={Page404} />\n            <Route exact path=\"/500\" name=\"Page 500\" component={Page500} />\n            <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\n          </Switch>\n        </HashRouter>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import 'react-app-polyfill/ie9' // For IE 9-11 support\nimport 'react-app-polyfill/ie11' // For IE 11 support\nimport './polyfill'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}