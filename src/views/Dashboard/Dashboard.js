import React, {
  Component
} from "react";
import {
  ButtonGroup,
  Card,
  CardBody,
  Col,
  Row,
} from "reactstrap";
import {
  mainChartOpts,
  mainChartData,
  cardChartData1,
  cardChartData2,
  cardChartData3,
  cardChartData4,
  cardChartOpts1,
  cardChartOpts2,
  cardChartOpts3,
  cardChartOpts4,
  numCardElement,
  numElement
} from "./costant";
import {
  CardChart,
  MainChart
} from "./Graph";
import { FiActivity } from "react-icons/fi";
import { GiSpeedometer, GiCartwheel } from "react-icons/gi";
import { FaSpaceShuttle } from "react-icons/fa"

const DATA = [
  [105, 215, 60, 0.0069, 24.9768, 0.0166667, 0],
  [108, 189, 62, 0.01414, 26.0748, 0.0333333, 0],
  [111, 194, 65, 0.02168, 27.1332, 0.05, 0],
  [113, 223, 68, 0.0295, 28.134, 0.0666667, 0],
  [115, 198, 70, 0.03759, 29.1312, 0.0833333, 0],
  [116, 194, 72, 0.04593, 30.0312, 0.1, 0],
  [118, 207, 75, 0.05451, 30.8988, 0.116667, 0],
  [119, 207, 77, 0.06335, 31.8168, 0.133333, 0],
  [120, 200, 79, 0.07246, 32.7924, 0.15, 0],
  [121, 200, 81, 0.08183, 33.7248, 0.166667, 0],
  [121, 222, 84, 0.09141, 34.4844, 0.183333, 0],
  [123, 225, 85, 0.10131, 35.6364, 0.2, 0],
  [124, 208, 88, 0.11148, 36.612, 0.216667, 0],
  [125, 193, 89, 0.12186, 37.3788, 0.233333, 0],
  [125, 193, 92, 0.13254, 38.4552, 0.25, 0],
  [127, 195, 94, 0.14342, 39.1608, 0.266667, 0],
  [128, 195, 96, 0.15454, 40.0392, 0.283333, 0],
  [129, 194, 97, 0.16587, 40.8024, 0.3, 0],
  [130, 189, 100, 0.17742, 41.436, 0.316667, 0],
  [130, 187, 101, 0.18917, 42.4224, 0.333333, 0],
  [131, 196, 103, 0.20114, 43.1064, 0.35, 0],
  [132, 183, 105, 0.21331, 43.812, 0.366667, 0],
  [133, 190, 107, 0.22563, 44.3592, 0.383333, 0],
  [133, 153, 108, 0.23816, 45.108, 0.4, 0],
  [134, 190, 101, 0.2508, 45.4932, 0.416667, 0],
  [134, 202, 97, 0.26367, 46.3464, 0.433333, 0],
  [135, 215, 98, 0.2767, 46.89, 0.45, 0],
  [136, 221, 100, 0.28996, 47.7252, 0.466667, 0],
  [136, 244, 102, 0.30333, 48.1572, 0.483333, 0],
  [137, 228, 103, 0.31695, 49.0392, 0.5, 0],
  [138, 203, 104, 0.3307, 49.4928, 0.516667, 0],
  [138, 198, 106, 0.34467, 50.2704, 0.533333, 0],
  [139, 221, 107, 0.35881, 50.9076, 0.55, 0],
  [139, 210, 108, 0.37313, 51.5628, 0.566667, 0],
  [140, 215, 109, 0.38769, 52.4052, 0.583333, 0],
  [140, 229, 111, 0.40239, 52.9236, 0.6, 0],
  [141, 252, 111, 0.41716, 53.1864, 0.616667, 0],
  [142, 198, 110, 0.43221, 53.9928, 0.633333, 0],
  [142, 229, 101, 0.44726, 54.36, 0.65, 0],
  [143, 221, 102, 0.46252, 54.918, 0.666667, 0],
  [143, 214, 103, 0.4779, 55.3932, 0.683333, 0],
  [144, 236, 104, 0.49348, 56.07, 0.7, 0],
  [144, 219, 105, 0.50922, 56.664, 0.716667, 0],
  [145, 222, 106, 0.52518, 57.4776, 0.733333, 0],
  [145, 205, 107, 0.54124, 57.7872, 0.75, 0],
  [145, 233, 108, 0.55738, 58.1004, 0.766667, 0],
  [146, 222, 109, 0.57369, 58.7376, 0.783333, 0],
  [146, 237, 110, 0.59019, 59.3928, 0.8, 0],
  [147, 229, 111, 0.60675, 59.6124, 0.816667, 0],
  [147, 223, 112, 0.62349, 60.2856, 0.833333, 0],
  [148, 216, 113, 0.64037, 60.7428, 0.85, 0],
  [148, 225, 114, 0.65737, 61.2072, 0.866667, 0],
  [148, 255, 115, 0.67444, 61.4412, 0.883333, 0],
  [149, 247, 105, 0.69179, 62.154, 0.9, 0],
  [149, 229, 101, 0.70927, 62.8848, 0.916667, 0],
  [150, 228, 102, 0.72683, 63.3816, 0.933333, 0],
  [150, 236, 103, 0.74454, 63.8892, 0.95, 0],
  [150, 218, 104, 0.76234, 64.1448, 0.966667, 0],
  [151, 251, 105, 0.78037, 64.9224, 0.983333, 0],
  [151, 243, 106, 0.79855, 65.4516, 1, 0],
  [152, 252, 107, 0.81688, 65.9916, 1.01667, 0],
  [152, 238, 108, 0.83537, 66.5388, 1.03333, 0],
  [152, 224, 108, 0.85401, 67.0968, 1.05, 0],
  [152, 210, 109, 0.87272, 67.3776, 1.06667, 0],
  [152, 234, 110, 0.8916, 67.95, 1.08333, 0],
  [152, 251, 110, 0.91063, 68.5296, 1.1, 0],
  [153, 227, 111, 0.92983, 69.12, 1.11667, 0],
  [153, 228, 112, 0.94903, 69.12, 1.13333, 0],
  [153, 214, 113, 0.96823, 69.12, 1.15, 0],
  [154, 225, 114, 0.98777, 70.3332, 1.16667, 0],
  [153, 268, 114, 1.00739, 70.6428, 1.18333, 0],
  [153, 234, 115, 1.02713, 71.0352, 1.2, 0],
  [153, 240, 115, 1.04692, 71.2692, 1.21667, 0],
  [153, 243, 116, 1.06685, 71.748, 1.23333, 0],
  [153, 197, 116, 1.08692, 72.234, 1.25, 0],
  [153, 242, 116, 1.10702, 72.234, 1.26667, 0],
  [153, 259, 104, 1.12718, 72.7236, 1.28333, 0],
  [153, 270, 105, 1.14743, 72.8892, 1.3, 0],
  [154, 272, 105, 1.16777, 73.224, 1.31667, 0],
  [154, 300, 106, 1.1883, 73.8972, 1.33333, 0],
  [153, 272, 106, 1.20892, 74.2392, 1.35, 0],
  [154, 256, 107, 1.22964, 74.5848, 1.36667, 0],
  [154, 248, 108, 1.25045, 74.934, 1.38333, 0],
  [154, 269, 108, 1.27136, 75.2868, 1.4, 0],
  [154, 264, 109, 1.29243, 75.8196, 1.41667, 0],
  [154, 279, 109, 1.31364, 76.3596, 1.43333, 0],
  [154, 247, 110, 1.33492, 76.6332, 1.45, 0],
  [154, 244, 111, 1.35634, 77.094, 1.46667, 0],
  [154, 262, 112, 1.37794, 77.7492, 1.48333, 0],
  [154, 250, 112, 1.39961, 78.0336, 1.5, 0],
  [155, 243, 113, 1.42149, 78.606, 1.51667, 0],
  [155, 257, 113, 1.44336, 78.8976, 1.53333, 0],
  [155, 209, 114, 1.46536, 79.1892, 1.55, 0],
  [155, 232, 114, 1.48741, 79.3836, 1.56667, 0],
  [155, 273, 115, 1.50968, 80.1792, 1.58333, 0],
  [155, 276, 116, 1.53209, 80.6832, 1.6, 0],
  [155, 235, 116, 1.55459, 80.9892, 1.61667, 0],
  [155, 233, 93, 1.57717, 81.2988, 1.63333, 0],
  [155, 286, 93, 1.59993, 81.9216, 1.65, 0],
  [155, 266, 94, 1.62269, 81.9216, 1.66667, 0],
  [155, 264, 94, 1.64562, 82.5516, 1.68333, 0],
  [155, 267, 94, 1.66864, 82.872, 1.7, 0],
  [154, 291, 95, 1.69175, 83.196, 1.71667, 0],
  [154, 314, 95, 1.71504, 83.8476, 1.73333, 0],
  [155, 286, 96, 1.73851, 84.51, 1.75, 0],
  [155, 273, 96, 1.76217, 85.1832, 1.76667, 0],
  [155, 260, 97, 1.78593, 85.5252, 1.78333, 0],
  [155, 275, 97, 1.80978, 85.8672, 1.8, 0],
  [155, 267, 98, 1.83373, 86.2128, 1.81667, 0],
  [155, 252, 102, 1.85768, 86.2128, 1.83333, 0],
  [155, 300, 108, 1.88172, 86.562, 1.85, 0],
  [156, 331, 109, 1.90587, 86.9148, 1.86667, 0],
  [156, 296, 110, 1.93021, 87.6276, 1.88333, 0],
  [156, 327, 110, 1.95467, 87.9876, 1.9, 0],
  [156, 327, 111, 1.97915, 88.2072, 1.91667, 0],
  [157, 286, 111, 2.00379, 88.7184, 1.93333, 0],
  [157, 291, 108, 2.02854, 89.0892, 1.95, 0],
  [158, 307, 102, 2.05339, 89.46, 1.96667, 0],
  [159, 317, 102, 2.07835, 89.838, 1.98333, 0],
  [159, 333, 103, 2.10341, 90.216, 2, 0],
  [159, 354, 103, 2.12857, 90.5976, 2.01667, 0],
  [159, 332, 104, 2.15385, 90.9828, 2.03333, 0],
  [160, 318, 104, 2.17934, 91.764, 2.05, 0],
  [160, 328, 105, 2.20496, 92.16, 2.06667, 0],
  [161, 320, 105, 2.23071, 92.8008, 2.08333, 0],
  [161, 316, 106, 2.25654, 92.9628, 2.1, 0],
  [161, 314, 106, 2.28247, 93.366, 2.11667, 0],
  [162, 308, 107, 2.30852, 93.7764, 2.13333, 0],
  [162, 302, 107, 2.33475, 94.4388, 2.15, 0],
  [162, 328, 108, 2.36103, 94.608, 2.16667, 0],
  [162, 302, 108, 2.38755, 95.4504, 2.18333, 0],
  [162, 284, 109, 2.41418, 95.8788, 2.2, 0],
  [162, 311, 109, 2.44096, 96.3108, 2.21667, 0],
  [163, 305, 110, 2.46783, 96.8364, 2.23333, 0],
  [163, 275, 110, 2.49483, 97.1856, 2.25, 0],
  [163, 277, 111, 2.52195, 97.632, 2.26667, 0],
  [163, 260, 108, 2.54914, 97.8984, 2.28333, 0],
  [163, 284, 100, 2.57639, 98.0784, 2.3, 0],
  [163, 310, 100, 2.60378, 98.622, 2.31667, 0],
  [163, 301, 101, 2.63128, 98.9856, 2.33333, 0],
  [163, 285, 101, 2.6589, 99.4464, 2.35, 0],
  [163, 282, 101, 2.68653, 99.4464, 2.36667, 0],
  [163, 303, 102, 2.71428, 99.9108, 2.38333, 0],
  [163, 313, 102, 2.74208, 100.098, 2.4, 0],
  [163, 359, 102, 2.7701, 100.854, 2.41667, 0],
  [163, 342, 103, 2.79822, 101.236, 2.43333, 0],
  [163, 314, 103, 2.82637, 101.333, 2.45, 0],
  [164, 354, 104, 2.8547, 102.01, 2.46667, 0],
  [164, 341, 104, 2.88326, 102.794, 2.48333, 0],
  [164, 373, 105, 2.91195, 103.291, 2.5, 0],
  [165, 382, 105, 2.94072, 103.59, 2.51667, 0],
  [165, 361, 106, 2.96961, 103.993, 2.53333, 0],
  [166, 343, 106, 2.99861, 104.4, 2.55, 0],
  [166, 326, 107, 3.02773, 104.81, 2.56667, 0],
  [166, 302, 107, 3.05707, 105.638, 2.58333, 0],
  [166, 291, 108, 3.08653, 106.056, 2.6, 0],
  [167, 282, 108, 3.11599, 106.056, 2.61667, 0],
  [167, 280, 108, 3.14557, 106.481, 2.63333, 0],
  [167, 295, 108, 3.17526, 106.906, 2.65, 0],
  [166, 303, 109, 3.20496, 106.906, 2.66667, 0],
  [166, 287, 109, 3.23478, 107.334, 2.68333, 0],
  [166, 305, 109, 3.26471, 107.766, 2.7, 0],
  [166, 293, 110, 3.29471, 107.986, 2.71667, 0],
  [166, 304, 110, 3.32476, 108.205, 2.73333, 0],
  [167, 260, 110, 3.35496, 108.716, 2.75, 0],
  [167, 269, 111, 3.38526, 109.087, 2.76667, 0],
  [166, 255, 111, 3.41556, 109.087, 2.78333, 0],
  [167, 288, 112, 3.44596, 109.534, 2.8, 0],
  [166, 269, 112, 3.47656, 110.21, 2.81667, 0],
  [166, 300, 112, 3.50726, 110.441, 2.83333, 0],
  [166, 289, 102, 3.53806, 110.898, 2.85, 0],
  [166, 269, 100, 3.56906, 111.359, 2.86667, 0],
  [166, 285, 100, 3.59996, 111.359, 2.88333, 0],
  [166, 315, 100, 3.63086, 111.359, 2.9, 0],
  [166, 309, 100, 3.66196, 111.748, 2.91667, 0],
  [166, 280, 100, 3.69296, 111.748, 2.93333, 0],
  [165, 266, 101, 3.72416, 112.295, 2.95, 0],
  [165, 283, 101, 3.75546, 112.77, 2.96667, 0],
  [166, 325, 101, 3.78686, 112.928, 2.98333, 0],
  [165, 311, 101, 3.81816, 112.77, 3, 0],
  [166, 331, 102, 3.84966, 113.249, 3.01667, 0],
  [166, 340, 102, 3.88116, 113.328, 3.03333, 0],
  [166, 326, 102, 3.91276, 113.728, 3.05, 0],
  [166, 315, 102, 3.94436, 114.134, 3.06667, 0],
  [167, 314, 103, 3.97616, 114.214, 3.08333, 0],
  [167, 323, 103, 4.00796, 114.707, 3.1, 0],
  [167, 331, 103, 4.03986, 114.707, 3.11667, 0],
  [167, 333, 103, 4.07186, 115.2, 3.13333, 0],
  [167, 306, 104, 4.10386, 115.366, 3.15, 0],
  [167, 261, 104, 4.13606, 115.7, 3.16667, 0],
  [167, 264, 104, 4.16816, 115.7, 3.18333, 0],
  [168, 258, 104, 4.20046, 116.201, 3.2, 0],
  [168, 261, 104, 4.23276, 116.201, 3.21667, 0],
  [168, 293, 105, 4.26516, 116.708, 3.23333, 0],
  [168, 252, 105, 4.29766, 117.05, 3.25, 0],
  [167, 259, 105, 4.33016, 117.05, 3.26667, 0],
  [167, 245, 105, 4.36266, 117.05, 3.28333, 0],
  [167, 269, 105, 4.39536, 117.479, 3.3, 0],
  [167, 265, 105, 4.42806, 117.738, 3.31667, 0],
  [167, 292, 106, 4.46076, 117.911, 3.33333, 0],
  [168, 230, 106, 4.49356, 117.911, 3.35, 0],
  [168, 254, 106, 4.52636, 118.26, 3.36667, 0],
  [168, 249, 106, 4.55926, 118.26, 3.38333, 0],
  [168, 247, 106, 4.59216, 118.346, 3.4, 0],
  [168, 262, 106, 4.62516, 118.786, 3.41667, 0],
  [167, 282, 106, 4.65826, 118.786, 3.43333, 0],
  [167, 284, 107, 4.69126, 119.225, 3.45, 0],
  [167, 252, 107, 4.72436, 119.315, 3.46667, 0],
  [167, 271, 107, 4.75746, 119.225, 3.48333, 0],
  [167, 238, 107, 4.79076, 119.848, 3.5, 0],
  [167, 255, 107, 4.82406, 119.671, 3.51667, 0],
  [166, 271, 107, 4.85736, 120.118, 3.53333, 0],
  [166, 282, 107, 4.89066, 119.848, 3.55, 0],
  [166, 284, 108, 4.92416, 120.571, 3.56667, 0],
  [166, 282, 108, 4.95766, 120.571, 3.58333, 0],
  [166, 310, 108, 4.99126, 121.025, 3.6, 0],
  [167, 317, 108, 5.02486, 120.935, 3.61667, 0],
  [167, 295, 108, 5.05846, 120.935, 3.63333, 0],
  [166, 283, 108, 5.09226, 121.482, 3.65, 0],
  [167, 293, 109, 5.12596, 121.482, 3.66667, 0],
  [167, 315, 109, 5.15976, 121.482, 3.68333, 0],
  [167, 278, 109, 5.19356, 122.04, 3.7, 0],
  [167, 311, 109, 5.22766, 122.598, 3.71667, 0],
  [167, 354, 110, 5.26166, 122.411, 3.73333, 0],
  [167, 339, 110, 5.29576, 122.879, 3.75, 0],
  [168, 356, 110, 5.32996, 122.879, 3.76667, 0],
  [168, 321, 110, 5.36406, 122.879, 3.78333, 0],
  [168, 355, 110, 5.39826, 123.163, 3.8, 0],
  [168, 310, 110, 5.43256, 123.354, 3.81667, 0],
  [168, 266, 111, 5.46696, 123.829, 3.83333, 0],
  [168, 273, 111, 5.50136, 123.732, 3.85, 0],
  [168, 301, 111, 5.53566, 123.829, 3.86667, 0],
  [168, 260, 111, 5.57006, 123.829, 3.88333, 0],
  [168, 312, 111, 5.60446, 123.829, 3.9, 0],
  [168, 290, 111, 5.63906, 124.308, 3.91667, 0],
  [168, 288, 112, 5.67356, 124.308, 3.93333, 0],
  [168, 269, 112, 5.70826, 124.794, 3.95, 0],
  [168, 270, 112, 5.74276, 124.308, 3.96667, 0],
  [168, 275, 112, 5.77766, 124.891, 3.98333, 0],
  [168, 318, 112, 5.81216, 124.794, 4, 0],
  [168, 416, 112, 5.84706, 125.28, 4.01667, 0],
  [169, 400, 112, 5.88186, 125.28, 4.03333, 0],
  [169, 287, 112, 5.91676, 125.77, 4.05, 0],
  [169, 252, 113, 5.95176, 126.266, 4.06667, 0],
  [169, 346, 113, 5.98676, 126.266, 4.08333, 0],
  [169, 324, 113, 6.02186, 126.266, 4.1, 0],
  [170, 355, 113, 6.05696, 126.266, 4.11667, 0],
  [170, 283, 107, 6.09206, 126.266, 4.13333, 0],
  [170, 284, 98, 6.12706, 126.266, 4.15, 0],
  [170, 284, 98, 6.16216, 126.266, 4.16667, 0],
  [171, 303, 98, 6.19736, 126.767, 4.18333, 0],
  [170, 280, 98, 6.23256, 126.767, 4.2, 0],
  [170, 288, 98, 6.26766, 126.266, 4.21667, 0],
  [170, 272, 98, 6.30286, 126.767, 4.23333, 0],
  [170, 307, 98, 6.33806, 126.767, 4.25, 0],
  [169, 357, 98, 6.37336, 126.767, 4.26667, 0],
  [169, 283, 99, 6.40856, 126.767, 4.28333, 0],
  [169, 314, 99, 6.44376, 126.767, 4.3, 0],
  [170, 345, 99, 6.47896, 126.767, 4.31667, 0],
  [170, 284, 99, 6.51416, 126.767, 4.33333, 0],
  [170, 288, 99, 6.54946, 127.267, 4.35, 0],
  [170, 302, 99, 6.58486, 127.267, 4.36667, 0],
  [171, 396, 99, 6.62026, 127.267, 4.38333, 0],
  [171, 377, 99, 6.65566, 127.775, 4.4, 0],
  [171, 405, 99, 6.69116, 127.775, 4.41667, 0],
  [171, 343, 99, 6.72686, 128.286, 4.43333, 0],
  [172, 351, 99, 6.76246, 128.286, 4.45, 0],
  [172, 235, 100, 6.79806, 128.286, 4.46667, 0],
  [172, 241, 100, 6.83376, 128.286, 4.48333, 0],
  [172, 292, 100, 6.86936, 128.286, 4.5, 0],
  [172, 349, 100, 6.90496, 128.286, 4.51667, 0],
  [172, 386, 100, 6.94086, 128.801, 4.53333, 0],
  [172, 374, 100, 6.97656, 128.801, 4.55, 0],
  [172, 335, 100, 7.01236, 128.801, 4.56667, 0],
  [172, 372, 101, 7.04826, 129.323, 4.58333, 0],
  [172, 336, 101, 7.08436, 129.845, 4.6, 0],
  [172, 328, 101, 7.12036, 129.845, 4.61667, 0],
  [172, 359, 101, 7.15666, 130.374, 4.63333, 0],
  [172, 306, 101, 7.19286, 130.374, 4.65, 0],
  [172, 362, 101, 7.22906, 130.374, 4.66667, 0],
  [172, 366, 101, 7.26526, 130.374, 4.68333, 0],
  [173, 383, 101, 7.30146, 130.374, 4.7, 0],
  [173, 386, 101, 7.33786, 130.903, 4.71667, 0],
  [173, 394, 101, 7.37416, 130.903, 4.73333, 0],
  [173, 406, 102, 7.41056, 130.903, 4.75, 0],
  [173, 350, 102, 7.44696, 130.903, 4.76667, 0],
  [173, 391, 102, 7.48326, 130.903, 4.78333, 0],
  [173, 382, 102, 7.51966, 130.903, 4.8, 0],
  [173, 406, 102, 7.55616, 131.44, 4.81667, 0],
  [174, 404, 102, 7.59266, 131.44, 4.83333, 0],
  [174, 339, 102, 7.62916, 131.288, 4.85, 0],
  [174, 284, 102, 7.66566, 131.44, 4.86667, 0],
  [175, 339, 102, 7.70216, 131.44, 4.88333, 0],
  [174, 334, 102, 7.73886, 131.983, 4.9, 0],
  [175, 313, 102, 7.77546, 131.983, 4.91667, 0],
  [174, 334, 102, 7.81196, 131.44, 4.93333, 0],
  [174, 307, 103, 7.84866, 131.983, 4.95, 0],
  [174, 400, 103, 7.88536, 131.983, 4.96667, 0],
  [174, 375, 103, 7.92196, 131.983, 4.98333, 0],
  [174, 335, 103, 7.95876, 132.527, 5, 0],
  [174, 364, 103, 7.99556, 132.527, 5.01667, 0],
  [174, 393, 103, 8.03246, 132.527, 5.03333, 0],
  [173, 367, 103, 8.06926, 132.527, 5.05, 0],
  [173, 364, 103, 8.10626, 133.157, 5.06667, 0]
]

let cnt = 1;

let randomNumber = (min = 0, max = 1) => {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

function Extra(props) {
  if (!props.showExtra) {
    return null;
  }

  return (
    <Row>

      <Col xs="12" sm="6" lg="4">
        <Card className="text-white bg-purple">
          <CardBody className="pb-2">
            <Row>
              <Col xs="4" sm="4" lg="4">
                <div className="text-center">Temp [°C]</div>
                <div className="text-value text-center">{props.weather.temperature}</div>
              </Col>
              <Col xs="4" sm="4" lg="4">
                <div className="text-center">Humidity [%]</div>
                <div className="text-value text-center">{props.weather.humidity}</div>
              </Col>
              <Col xs="4" sm="4" lg="4">
                <div className="text-center">Press [hPa]</div>
                <div className="text-value text-center">{props.weather.pressure}</div>
              </Col>
            </Row>
          </CardBody>
        </Card>
      </Col>

      <Col xs="12" sm="6" lg="2">
        <Card className="text-white bg-dark">
          <CardBody className="pb-2">
            <div>Gear</div>
            <div className="text-value text-center">{props.gear}</div>
          </CardBody>
        </Card>
      </Col>

      <Col xs="12" sm="6" lg="2">
        <Card className="text-dark bg-secondary">
          <CardBody className="pb-2">
            <div>Distance [m]</div>
            <div className="text-value text-center">{props.distance}</div>
          </CardBody>
        </Card>
      </Col>

      <Col xs="12" sm="6" lg="4">
        <Card className="text-white bg-primary">
          <CardBody className="pb-2">
            <div>Time [s]</div>
            <div className="text-value text-center">{props.time}</div>
          </CardBody>
        </Card>
      </Col>

    </Row>
  );
}

class Dashboard extends Component {
  _isMounted = false;

  constructor(props) {
    super(props);

    this.state = {
      history: "",
      data: {
        "dest": "0",
        "type": "0",
        "heartrate": DATA[0][0],
        "power": DATA[0][1],
        "cadence": DATA[0][2],
        "distance": DATA[0][3],
        "speed": DATA[0][4],
        "time": Math.round(DATA[0][5] / 3 * 60),
        "gear": Math.floor(0 / 29 + 1)
      },
      weather: {
        "temperature": randomNumber(28, 20),
        "humidity": randomNumber(60, 50),
        "pressure": 1
      },
      showExtra: true
    };
  }

  loading = () => (
    <div className="animated fadeIn pt-1 text-center">Loading...</div>
  );

  history(history) {
    let param = ["heartrate", "cadence", "power", "speed"];
    let chart = {
      heartrate: [],
      cadence: [],
      power: [],
      speed: []
    };
    let miniChart = {
      heartrate: [],
      cadence: [],
      power: [],
      speed: []
    };
    let rev_history = history.reverse()
    let list = rev_history.slice(0, numElement);
    let miniList = rev_history.slice(0, numCardElement);

    list.reverse();
    miniList.reverse();

    for (let i = 0; i < list.length && i < numElement; i++) {
      for (let j = 0; j < param.length; j++) {
        chart[param[j]].push(JSON.parse(list[i])[param[j]]);
        if (i < numCardElement) {
          miniChart[param[j]].push(JSON.parse(miniList[i])[param[j]]);
        }
      }
    }

    let newState = {
      ...this.state,
      history: {
        chart: chart,
        miniChart: miniChart
      }
    }
    this.setState(newState);
  }

  componentDidMount() {
    this._isMounted = true;

    if (this._isMounted) {
      setInterval(() => {
        if (cnt >= DATA.length)
          cnt = 0;

        let data = {
          "dest": "0",
          "type": "0",
          "heartrate": DATA[cnt][0],
          "power": DATA[cnt][1],
          "cadence": DATA[cnt][2],
          "distance": DATA[cnt][3],
          "speed": DATA[cnt][4],
          "time": Math.round(DATA[cnt][5] / 3 * 60),
          "gear": Math.floor(cnt / 29 + 1)
        }
        cnt++;
        this.setState({ data });
      }, 300);

      // aggiorna i valori del meteo
      setInterval(() => {
        let weather = {
          "temperature": randomNumber(30, 20),
          "humidity": randomNumber(80, 50),
          "pressure": randomNumber(5, 1)
        }
        this.setState({ weather })
      }, 3000);
    }
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  render() {
    return (
      <div className="animated fadeIn">
        <Row>
          <Col xs="12" sm="6" lg="3">
            <Card className="text-white bg-info">
              <CardBody className="pb-0">
                <ButtonGroup id="card1" className="float-right">
                  <FaSpaceShuttle size={'1.5em'} />
                </ButtonGroup>
                <div className="text-value">{this.state.data.power}</div>
                <div>Power [W]</div>
              </CardBody>
              <div className="chart-wrapper" style={{ height: "60px" }}>
                <CardChart
                  state={cardChartData1}
                  opts={cardChartOpts1}
                  value="power"
                  data={this.state.data}
                  history={this.state.history.miniChart}
                />
              </div>
            </Card>
          </Col>

          <Col xs="12" sm="6" lg="3">
            <Card className="text-white bg-success">
              <CardBody className="pb-0">
                <ButtonGroup id="card2" className="float-right">
                  <GiCartwheel size={'1.5em'} />
                </ButtonGroup>
                <div className="text-value">{this.state.data.cadence}</div>
                <div>Cadence [rpm]</div>
              </CardBody>
              <div className="chart-wrapper" style={{ height: "60px" }}>
                <CardChart
                  state={cardChartData2}
                  opts={cardChartOpts2}
                  value="cadence"
                  data={this.state.data}
                  history={this.state.history.miniChart}
                />
              </div>
            </Card>
          </Col>

          <Col xs="12" sm="6" lg="3">
            <Card className="text-white bg-warning">
              <CardBody className="pb-0">
                <ButtonGroup id="card3" className="float-right">
                  <GiSpeedometer size={'1.5em'} />
                </ButtonGroup>
                <div className="text-value">{this.state.data.speed}</div>
                <div>Speed [km/h]</div>
              </CardBody>
              <div className="chart-wrapper" style={{ height: "60px" }}>
                <CardChart
                  state={cardChartData3}
                  opts={cardChartOpts3}
                  value="speed"
                  data={this.state.data}
                  history={this.state.history.miniChart}
                />
              </div>
            </Card>
          </Col>

          <Col xs="12" sm="6" lg="3">
            <Card className="text-white bg-danger">
              <CardBody className="pb-0">
                <ButtonGroup id="card4" className="float-right">
                  <FiActivity size={'1.5em'} />
                </ButtonGroup>
                <div className="text-value">{this.state.data.heartrate}</div>
                <div>Heartrate [bpm]</div>
              </CardBody>
              <div className="chart-wrapper" style={{ height: "60px" }}>
                <CardChart
                  state={cardChartData4}
                  opts={cardChartOpts4}
                  value="heartrate"
                  data={this.state.data}
                  history={this.state.history.miniChart}
                />
              </div>
            </Card>
          </Col>
        </Row>

        <Row>
          <Col>
            <Card>
              <CardBody>
                <div
                  className="chart-wrapper"
                  style={{ height: 400 + "px", marginTop: 0 + "px" }}
                >
                  <MainChart
                    state={mainChartData}
                    opts={mainChartOpts}
                    data={this.state.data}
                    history={this.state.history.chart}
                  />
                </div>
              </CardBody>
            </Card>
          </Col>
        </Row>

        <Extra
          showExtra={this.state.showExtra}
          gear={this.state.data.gear}
          distance={this.state.data.distance}
          time={this.state.data.time}
          weather={this.state.weather}
        />
      </div>
    );
  }
}

export default Dashboard;